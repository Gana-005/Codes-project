
import numpy as np
import ipywidgets as widgets
from math import e
def function(t,y):
  return np.cos(t*y)
def solution(t):
  return (e**t)+(t-5)**2
def solution_derivative(t):
  return (e**t)+2*(t-5)
#here it's dy/dt-f(t,y)
def source(t,y):
  return solution_derivative(t)-function(t,y)
def curve_changer(N):
  #Calculating Step size
  h=4.0/N
  #for storing yvalues
  yvalue=[None]*(N+1)
  #for storing tvalues
  tvalue=[None]*(N+1)
  realvalue=[None]*(N+1)
  #Initial value
  yvalue[0]=26
  tvalue[0]=0
  realvalue[0]=26
  #scheme
  for j in range(1,int(N+1)):
        tvalue[j]=h*j
        #Explicit Euler
        yvalue[j]=yvalue[j-1]+h*(function(tvalue[j-1],yvalue[j-1])+source(tvalue[j-1],yvalue[j-1]))
        realvalue[j]=solution(h*j)
  plt.subplot(1,2,1)
  #Plotting euler approximated solutions
  plt.plot(tvalue,yvalue,color="blue")
  plt.title("Euler Approximation")
  plt.xlabel("t")
  plt.ylabel("y")
  #Plotting exact solution
  plt.subplot(1,2,2)
  plt.plot(tvalue,realvalue,color="red")
  plt.title("Exact solution")
  plt.xlabel("t")
  plt.ylabel("y")
  plt.show()
widgets.interact(curve_changer,N=(1,300,1))
