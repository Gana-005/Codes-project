import matplotlib.pyplot as plt
import numpy as np
from math import e
import ipywidgets as widgets
def solution(t,x):
  return (e**t)*np.sin(x)
def variable_coefficient(t,x):
 return x*(x-1)
def Initial_condition(x):
  return np.sin(x)
def boundary_condition0(t):
  return 0
def boundary_condition1(t):
  return (e**t)*np.sin(1)
def source_term(t,x):
  return (e**t)*(2*x*np.sin(x)+((x**2-x)*np.cos(x)))
n_x=int(input("Number of steps in space domain"))
n_t=int(input("Number of steps in time domain"))
h=1.0/n_x
k=1.0/n_t
def curve_changer(Time):
  yvaluedict={}
  xarray=[None]*int(n_x+1)
  for i in range(0,n_t+1):
    yvaluedict[i]=[None]*int(n_x+1)
    yvaluedict[i][0]=boundary_condition0(i*k)
    #yvaluedict[i][n_x]=boundary_condition1(i*k)
  def flux(n,j):
    return max(variable_coefficient(k*n,h*j),0)*yvaluedict[n][int(j-(1/2))] + min(variable_coefficient(k*n,h*j),0)*yvaluedict[n][int(j+(1/2))]
  for i in range(0,n_x+1):
    xarray[i]=i*h
    yvaluedict[0][i]=Initial_condition(i*h)
  for i in range(1,n_t+1):
    for j in range(1,n_x):
      yvaluedict[i][j]=yvaluedict[i-1][j]-((k/h)*(flux(i-1,(j+(1/2)))-flux(i-1,(j-(1/2)))))+ k*source_term(i*k,j*h)
  plt.plot(xarray,yvaluedict[int(Time/k)],label="Approximation")
  exact=[None]*int(n_x+1)
  for i in range(0,int(n_x+1)):
          exact[i]=solution(Time,xarray[i])
  plt.plot(xarray,exact,label="Exact")
  plt.legend()
  plt.show()
widgets.interact(curve_changer,Time=(0,1,k))
